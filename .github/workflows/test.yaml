on:
  workflow_call: {}

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout commit
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version-file: .python-version
    - name: Install pipx
      run: python3 -m pip install --user pipx && python3 -m pipx ensurepath
    - name: Install Poetry with pipx
      run: |
        pipx install poetry
    - name: Setup Python dependencies cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-
    - name: Install dependencies
      run: make setup
    - name: Lint
      run: make lint

  unit:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version-file: .python-version
    - name: Install pipx
      run: python3 -m pip install --user pipx && python3 -m pipx ensurepath
    - name: Install Poetry with pipx
      run: |
        pipx install poetry
    - name: Setup Python dependencies cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-
    - name: Install dependencies
      run: make setup
    - name: Run unit tests
      run: make test_unit

  integration:
    env:
      # keep Minikube state out of /home/runner
      MINIKUBE_HOME: ${{ github.workspace }}/.minikube
      MINIKUBE_DRIVER: none
    name: Integration tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version-file: .python-version
    - name: Install pipx
      run: python3 -m pip install --user pipx && python3 -m pipx ensurepath
    - name: Install Poetry with pipx
      run: |
        pipx install poetry
    - name: Setup Python dependencies cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-
    - name: Install dependencies
      run: make setup
    - name: Login to ghcr.io
      uses: docker/login-action@v3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - name: Fix minikube home permissions
      run: |
        mkdir -p "$MINIKUBE_HOME"
        sudo chown -R "$USER:$USER" "$MINIKUBE_HOME"
        chmod -R u+rwX "$MINIKUBE_HOME"
    - name: Start minikube
      run: |
        make install_k8s
        make start_k8s
    - name: Show Minikube status and logs
      if: failure()
      run: |
        echo "üß™ Minikube status:"
        minikube status || true

        echo "üìÑ Minikube logs:"
        minikube logs || true

        echo "üìÅ Kube config:"
        kubectl config view || true

        echo "üîç Kubectl current context:"
        kubectl config current-context || true

        echo "üì° Kubectl cluster-info:"
        kubectl cluster-info || true

        echo "üîß Docker containers:"
        docker ps -a || true
    - name: Pull test images
      run: make docker_pull_test_images
    - name: Setup services in minikube
      run: make apply_configuration_k8s
    - name: Run integration tests
      run: make test_integration

  image-upload:
    name: Upload image artifact
    runs-on: ubuntu-latest
    steps:
    - name: Checkout commit
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version-file: .python-version
    - name: Install pipx
      run: python3 -m pip install --user pipx && python3 -m pipx ensurepath
    - name: Install Poetry with pipx
      run: |
        pipx install poetry
    - name: Setup Python dependencies cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-
    - name: Install dependencies
      run: make setup
    - name: Login to ghcr.io
      uses: docker/login-action@v3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - name: Build Docker image
      run: make build/image
    - name: Upload image artifact
      uses: neuro-inc/upload-image-action@v24.4.0
      with:
        image: platformstorageapi
        token: ${{ secrets.GITHUB_TOKEN }}

  check:
    name: Check
    needs:
    - lint
    - unit
    - integration
    - image-upload
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
